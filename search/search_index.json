{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the community-written user documentation for Legally Distinct Missile! Welcome \u00b6 Legally Distinct Missile, is the official Smarty Dressed Games' RocketMod fork. In December of 2019, RocketMod, the most widely used plugin framework for Unturned multiplayer servers, was discontinued by its maintainers. You can read their official farewell, and go more in-depth with an explanation, here . As RocketMod (now LDM), is still considered a necessity of hosting more-than-basic Unturned servers, we have decided to open up a Discord server, and this documentation, as an homage to the original RocketMod documentation and Discords, that provided the bulk of information and support for server owners. Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord. Installation \u00b6 Assuming you already have a vanilla Unturned server running, either locally through SteamCMD, or through a 3 rd party hosting provider, please follow the installation instructions, here . If you don't have a server, read our Getting Started with a New Server guide, here . (Coming soon)","title":"Home"},{"location":"#welcome","text":"Legally Distinct Missile, is the official Smarty Dressed Games' RocketMod fork. In December of 2019, RocketMod, the most widely used plugin framework for Unturned multiplayer servers, was discontinued by its maintainers. You can read their official farewell, and go more in-depth with an explanation, here . As RocketMod (now LDM), is still considered a necessity of hosting more-than-basic Unturned servers, we have decided to open up a Discord server, and this documentation, as an homage to the original RocketMod documentation and Discords, that provided the bulk of information and support for server owners. Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord.","title":"Welcome"},{"location":"#installation","text":"Assuming you already have a vanilla Unturned server running, either locally through SteamCMD, or through a 3 rd party hosting provider, please follow the installation instructions, here . If you don't have a server, read our Getting Started with a New Server guide, here . (Coming soon)","title":"Installation"},{"location":"about/documentation/","text":"We use MkDocs to create our documentation & guides. You can use basic html & markdown in the guides and also all the features of our theme mkdocs-material and the following extensions: admonition ( https://squidfunk.github.io/mkdocs-material/extensions/admonition/ ) meta ( https://squidfunk.github.io/mkdocs-material/extensions/metadata/ ) codehilite ( https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ ) toc ( https://squidfunk.github.io/mkdocs-material/extensions/permalinks/ ) pymdownx ( https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ ) You can see further examples of markdown here: https://github.com/squidfunk/mkdocs-material/blob/master/docs/specimen.md ( https://squidfunk.github.io/mkdocs-material/specimen/ )","title":"Documentation"},{"location":"development-guide/concept/code-documentation/","text":"","title":"Code documentation"},{"location":"development-guide/concept/compatibility/","text":"","title":"Compatibility"},{"location":"development-guide/concept/ioc/","text":"","title":"Ioc"},{"location":"development-guide/getting-started/commands/","text":"Commands \u00b6 Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" . Implementing Commands \u00b6 There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute. 1. Registering Commands with IRocketCommand \u00b6 Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads. 2. Registering Commands with RocketCommand attribute \u00b6 The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"Commands"},{"location":"development-guide/getting-started/commands/#commands","text":"Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" .","title":"Commands"},{"location":"development-guide/getting-started/commands/#implementing-commands","text":"There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute.","title":"Implementing Commands"},{"location":"development-guide/getting-started/commands/#1-registering-commands-with-irocketcommand","text":"Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads.","title":"1. Registering Commands with IRocketCommand"},{"location":"development-guide/getting-started/commands/#2-registering-commands-with-rocketcommand-attribute","text":"The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"2. Registering Commands with RocketCommand attribute"},{"location":"development-guide/getting-started/configurations/","text":"Configurations \u00b6 Configurations are used to read, write and store variables. This allows an user to configure your plugin. using Rocket.Core.Plugins ; namespace SamplePlugin { // 'Config' can be the name of any class you want be it PluginConfig or Configuration. public class MyPluginMain : Plugin < Config > { public MyPluginMain ( IDependencyContainer container ) : base ( \"MyPlugin\" , container ) { } } // Doesn't need to inherit from anything. Simply add in any variables you need for your config in this class. // The assigned vlaues will act as defaults public class Config { public string WelcomeMsg { get ; set ; } = \"MyWelcomeMsg\" ; [ConfigArray (ElementName = \"Class\")] public ConfigClass [] Classes { get ; set ; } = new ConfigClass [] { new ConfigClass () { Id = 32 , Amount = 2 } }; } public class ConfigClass { public int Id { get ; set ; }; public int Amount { get ; set ; }; } } Reading from Configuration \u00b6 To use the values from the configuration you can use the following code string myMsg = ConfigurationInstance . WelcomeMsg ; Saving Configuration \u00b6 To save the config, you can use the following method: await Configuration . SaveAsync (); Creating Multiple Configurations \u00b6 using Rocket.Core.Plugins ; using Rocket.Core.Configuration ; namespace SamplePlugin { // 'ConfigOne' will act as the base configuration and use ConfigurationInstance to read values public class MyPluginMain : Plugin < ConfigOne > { private IConfiguration config ; private ConfigTwo configTwo ; public MyPluginMain ( IDependencyContainer container , IConfiguration config ) : base ( \"MyPlugin\" , container ) { this . config = config ; } protected override async Task OnActivate ( bool isFromReload ) { // Initiate second config ConfigurationContext ctx = new ConfigurationContext ( \"FileName\" ); await config . LoadAsync ( ctx , new ConfigTwo ()); // Load from file configTwo = config . Get < ConfigTwo > (); // Save to file config . Set ( configTwo ); await config . SaveAsync (); } } // Doesn't need to inherit from anything. Simply add in any variables you need for your config in this class. // The assigned vlaues will act as defaults public class ConfigOne { public string MyWelcomeMsg { get ; set ; } = \"MyWelcomeMsg\" ; [ConfigArray (ElementName = \"Class\")] public ConfigClass [] Classes { get ; set ; } = new ConfigClass [] { new ConfigClass () { Id = 32 , Amount = 2 } }; } public class ConfigClass { public int Id { get ; set ; }; public int Amount { get ; set ; }; } public class ConfigTwo { public string SampleVariable { get ; set ; } } }","title":"Configurations"},{"location":"development-guide/getting-started/configurations/#configurations","text":"Configurations are used to read, write and store variables. This allows an user to configure your plugin. using Rocket.Core.Plugins ; namespace SamplePlugin { // 'Config' can be the name of any class you want be it PluginConfig or Configuration. public class MyPluginMain : Plugin < Config > { public MyPluginMain ( IDependencyContainer container ) : base ( \"MyPlugin\" , container ) { } } // Doesn't need to inherit from anything. Simply add in any variables you need for your config in this class. // The assigned vlaues will act as defaults public class Config { public string WelcomeMsg { get ; set ; } = \"MyWelcomeMsg\" ; [ConfigArray (ElementName = \"Class\")] public ConfigClass [] Classes { get ; set ; } = new ConfigClass [] { new ConfigClass () { Id = 32 , Amount = 2 } }; } public class ConfigClass { public int Id { get ; set ; }; public int Amount { get ; set ; }; } }","title":"Configurations"},{"location":"development-guide/getting-started/configurations/#reading-from-configuration","text":"To use the values from the configuration you can use the following code string myMsg = ConfigurationInstance . WelcomeMsg ;","title":"Reading from Configuration"},{"location":"development-guide/getting-started/configurations/#saving-configuration","text":"To save the config, you can use the following method: await Configuration . SaveAsync ();","title":"Saving Configuration"},{"location":"development-guide/getting-started/configurations/#creating-multiple-configurations","text":"using Rocket.Core.Plugins ; using Rocket.Core.Configuration ; namespace SamplePlugin { // 'ConfigOne' will act as the base configuration and use ConfigurationInstance to read values public class MyPluginMain : Plugin < ConfigOne > { private IConfiguration config ; private ConfigTwo configTwo ; public MyPluginMain ( IDependencyContainer container , IConfiguration config ) : base ( \"MyPlugin\" , container ) { this . config = config ; } protected override async Task OnActivate ( bool isFromReload ) { // Initiate second config ConfigurationContext ctx = new ConfigurationContext ( \"FileName\" ); await config . LoadAsync ( ctx , new ConfigTwo ()); // Load from file configTwo = config . Get < ConfigTwo > (); // Save to file config . Set ( configTwo ); await config . SaveAsync (); } } // Doesn't need to inherit from anything. Simply add in any variables you need for your config in this class. // The assigned vlaues will act as defaults public class ConfigOne { public string MyWelcomeMsg { get ; set ; } = \"MyWelcomeMsg\" ; [ConfigArray (ElementName = \"Class\")] public ConfigClass [] Classes { get ; set ; } = new ConfigClass [] { new ConfigClass () { Id = 32 , Amount = 2 } }; } public class ConfigClass { public int Id { get ; set ; }; public int Amount { get ; set ; }; } public class ConfigTwo { public string SampleVariable { get ; set ; } } }","title":"Creating Multiple Configurations"},{"location":"development-guide/getting-started/database/","text":"OUTDATED This page has not been updated for RocketMod 5. It will be updated once RocketMod 5 supports Databases. Rocket has an ORM API (based on Linq to Sql) so plugins do not have to deal with database connections. The API is abstract and all you need to care about is creating some classes. Connections, credentials etc are all managed by Rocket. Creating Contexts \u00b6 First create a class which extens DatabaseContext . After that, add your tables as public properties like shown below (see below on how to create tables). public MyDatabaseContext : DatabaseContext { public MyDatabaseContext ( IRocketPlugin plugin , IDatabaseProvider provider ) : base ( plugin , provider ) { } } You can initialize a DatabaseContext like this: IDatabaseProvider provider = R . Providers . GetProvider < IDatabaseProvider >(); MyDatabaseContext context = new MyDatabaseContext ( plugin , provider ); var result = provider . InitializeContext ( context ); if ( result . State == ContextInitializationState . CONNECTED ) { // Connected and created tables successfully. } Tables \u00b6 After you have got a database context, you can create a table. Just add a public Table<MyTable> MyTable => GetTable<MyTable>(); to your context class. A context can have multiple tables. public MyDatabaseContext : DatabaseContext { public MyDatabaseContext ( IRocketPlugin plugin , IDatabaseProvider provider ) : base ( plugin , provider ) { } public Table < MyTable > MyTable => GetTable < MyTable >(); public Table < PlayerScore > PlayerScores => GetTable < PlayerScore >(); } Create a class which extends database and has properties setup like this: [Table] public class PlayerScore : DatabaseTable { [Column] public virtual string PlayerName { set { Set ( value , nameof ( PlayerName )); } get { return Get < string >( nameof ( PlayerName )); } } [Column] public virtual int Score { set { Set ( value , nameof ( Score )); } get { return Get < int >( nameof ( Score )); } } } Queries \u00b6 To do queries, you can use LINQ. MyDatabaseContext context ...; int score = context . PlayerScores . First ( c => c . PlayerName == \"Rocket\" ). Select ( c => c . Score );","title":"Database"},{"location":"development-guide/getting-started/database/#creating-contexts","text":"First create a class which extens DatabaseContext . After that, add your tables as public properties like shown below (see below on how to create tables). public MyDatabaseContext : DatabaseContext { public MyDatabaseContext ( IRocketPlugin plugin , IDatabaseProvider provider ) : base ( plugin , provider ) { } } You can initialize a DatabaseContext like this: IDatabaseProvider provider = R . Providers . GetProvider < IDatabaseProvider >(); MyDatabaseContext context = new MyDatabaseContext ( plugin , provider ); var result = provider . InitializeContext ( context ); if ( result . State == ContextInitializationState . CONNECTED ) { // Connected and created tables successfully. }","title":"Creating Contexts"},{"location":"development-guide/getting-started/database/#tables","text":"After you have got a database context, you can create a table. Just add a public Table<MyTable> MyTable => GetTable<MyTable>(); to your context class. A context can have multiple tables. public MyDatabaseContext : DatabaseContext { public MyDatabaseContext ( IRocketPlugin plugin , IDatabaseProvider provider ) : base ( plugin , provider ) { } public Table < MyTable > MyTable => GetTable < MyTable >(); public Table < PlayerScore > PlayerScores => GetTable < PlayerScore >(); } Create a class which extends database and has properties setup like this: [Table] public class PlayerScore : DatabaseTable { [Column] public virtual string PlayerName { set { Set ( value , nameof ( PlayerName )); } get { return Get < string >( nameof ( PlayerName )); } } [Column] public virtual int Score { set { Set ( value , nameof ( Score )); } get { return Get < int >( nameof ( Score )); } } }","title":"Tables"},{"location":"development-guide/getting-started/database/#queries","text":"To do queries, you can use LINQ. MyDatabaseContext context ...; int score = context . PlayerScores . First ( c => c . PlayerName == \"Rocket\" ). Select ( c => c . Score );","title":"Queries"},{"location":"development-guide/getting-started/eventing/","text":"Eventing \u00b6 Events are used to trigger actions when something happens (e.g. player joined, server is shutting down, etc.) The default C# events used with old RocketMod 4 were very limited. It was not possible to have prioritized events. The new API allows controlling lifespan and execution order of events. Listening for events \u00b6 To listen to events, you will have to create a class which implements IEventListener<YourTargetEvent> . Don't forget to add [EventHandler] attribute to your method to set various options like priority. You have to register your event listener with EventBus.AddEventListener(YourPlugin, YourIListener) on plugin load to register your events. Example listener class \u00b6 public class MyEventListener : IEventListener < PlayerConnectedEvent >, IEventListener < PlayerChatEvent > { private IChatManager chatManager ; public MyEventListener ( IChatManager chatManager ) { this . chatManager = chatManager ; } [EventHandler] public async Task HandleEvent ( IEventEmitter emitter , PlayerConnectedEvent @event ) { await chatManager . BroadcastAsync ( @event . Player . Name + \" joined\" ); } [EventHandler] public async Task HandleEvent ( IEventEmitter emitter , PlayerChatEvent @event ) { if ( ContainsBadWord ( @event . Message )) { @event . IsCancelled = true ; } } public bool ContainsBadWord ( string message ) => return message . Contains ( \"Trojaner\" ); } public class MyPluginMain : Plugin { private readonly IChatManager chatManager ; private readonly IEventBus eventBus ; public MyPluginMain ( IDependencyContainer container , IChatManager chatManager , IEventBus eventBus ) : base ( \"MyPlugin\" , container ) { this . chatManager = chatManager ; this . eventBus = eventBus ; } protected override async Task OnActivate ( bool isFromReload ) { eventBus . AddEventListener ( this , new MyEventListener ( chatManager )); } } Note Execution order of events is like this: Lowest -> Low -> Normal -> High -> Highest -> Monitor . You should only use monitor when it does not impact anything, for example when you use it purely for logging purposes. Event priorities and cancellation \u00b6 EventHandlers can have priorities by using [EventHandler(Priority = EventPriority.X)] . The method with Lowest will be executed first, and Monitor will be executed last. Monitor should be only be used by listener which do not do any changes. If any event listener decides to cancel the event before your event listener is called, your listener will not be called. You can use [EventHandler(IgnoreCancelled = true)] to receive cancelled events. This also allows you to un-cancel events by setting Event.IsCancelled to false. Creating custom events (e.g. for other plugins) \u00b6 Create a new class which extends Rocket.API.Eventing.Event . If you want to have it cancellable, add ICancellableEvent to it. public class MyEvent : Event , ICancellableEvent { public string SomeData { get ; set ; } public MyEvent () : this ( true ) { } public MyEvent ( bool global = true ) : base ( global ) { } public MyEvent ( EventExecutionTargetContext executionTarget = EventExecutionTargetContext . Sync , bool global = true ) : base ( executionTarget , global ) { } public MyEvent ( string name = null , EventExecutionTargetContext executionTarget = EventExecutionTargetContext . Sync , bool global = true ) : base ( name , executionTarget , global ) { } public bool IsCancelled { get ; set ; } } You can trigger and handle your custom events like this: MyEvent @event = new MyEvent (); @event . SomeData = data ; eventBus . Emit ( plugin , @event , callback : ( e ) => { //event has finished and all listeners were called if ( @event . IsCancelled ) //if your event extends ICancellableEvent return ; // do something with @event.SomeData }); // plugins listening to events can change \"SomeData\"","title":"Eventing"},{"location":"development-guide/getting-started/eventing/#eventing","text":"Events are used to trigger actions when something happens (e.g. player joined, server is shutting down, etc.) The default C# events used with old RocketMod 4 were very limited. It was not possible to have prioritized events. The new API allows controlling lifespan and execution order of events.","title":"Eventing"},{"location":"development-guide/getting-started/eventing/#listening-for-events","text":"To listen to events, you will have to create a class which implements IEventListener<YourTargetEvent> . Don't forget to add [EventHandler] attribute to your method to set various options like priority. You have to register your event listener with EventBus.AddEventListener(YourPlugin, YourIListener) on plugin load to register your events.","title":"Listening for events"},{"location":"development-guide/getting-started/eventing/#example-listener-class","text":"public class MyEventListener : IEventListener < PlayerConnectedEvent >, IEventListener < PlayerChatEvent > { private IChatManager chatManager ; public MyEventListener ( IChatManager chatManager ) { this . chatManager = chatManager ; } [EventHandler] public async Task HandleEvent ( IEventEmitter emitter , PlayerConnectedEvent @event ) { await chatManager . BroadcastAsync ( @event . Player . Name + \" joined\" ); } [EventHandler] public async Task HandleEvent ( IEventEmitter emitter , PlayerChatEvent @event ) { if ( ContainsBadWord ( @event . Message )) { @event . IsCancelled = true ; } } public bool ContainsBadWord ( string message ) => return message . Contains ( \"Trojaner\" ); } public class MyPluginMain : Plugin { private readonly IChatManager chatManager ; private readonly IEventBus eventBus ; public MyPluginMain ( IDependencyContainer container , IChatManager chatManager , IEventBus eventBus ) : base ( \"MyPlugin\" , container ) { this . chatManager = chatManager ; this . eventBus = eventBus ; } protected override async Task OnActivate ( bool isFromReload ) { eventBus . AddEventListener ( this , new MyEventListener ( chatManager )); } } Note Execution order of events is like this: Lowest -> Low -> Normal -> High -> Highest -> Monitor . You should only use monitor when it does not impact anything, for example when you use it purely for logging purposes.","title":"Example listener class"},{"location":"development-guide/getting-started/eventing/#event-priorities-and-cancellation","text":"EventHandlers can have priorities by using [EventHandler(Priority = EventPriority.X)] . The method with Lowest will be executed first, and Monitor will be executed last. Monitor should be only be used by listener which do not do any changes. If any event listener decides to cancel the event before your event listener is called, your listener will not be called. You can use [EventHandler(IgnoreCancelled = true)] to receive cancelled events. This also allows you to un-cancel events by setting Event.IsCancelled to false.","title":"Event priorities and cancellation"},{"location":"development-guide/getting-started/eventing/#creating-custom-events-eg-for-other-plugins","text":"Create a new class which extends Rocket.API.Eventing.Event . If you want to have it cancellable, add ICancellableEvent to it. public class MyEvent : Event , ICancellableEvent { public string SomeData { get ; set ; } public MyEvent () : this ( true ) { } public MyEvent ( bool global = true ) : base ( global ) { } public MyEvent ( EventExecutionTargetContext executionTarget = EventExecutionTargetContext . Sync , bool global = true ) : base ( executionTarget , global ) { } public MyEvent ( string name = null , EventExecutionTargetContext executionTarget = EventExecutionTargetContext . Sync , bool global = true ) : base ( name , executionTarget , global ) { } public bool IsCancelled { get ; set ; } } You can trigger and handle your custom events like this: MyEvent @event = new MyEvent (); @event . SomeData = data ; eventBus . Emit ( plugin , @event , callback : ( e ) => { //event has finished and all listeners were called if ( @event . IsCancelled ) //if your event extends ICancellableEvent return ; // do something with @event.SomeData }); // plugins listening to events can change \"SomeData\"","title":"Creating custom events (e.g. for other plugins)"},{"location":"development-guide/getting-started/logging/","text":"Logging \u00b6 RocketMod 5 uses ILogger service for logging. You can use it in your plugin like this: public class MyPlugin : Plugin { private readonly ILogger logger ; public MyPlugin ( IDependencyContainer container , ILogger logger ): base ( container ) { this . logger = logger ; } protected override async Task OnActivate ( bool isFromReload ) { logger . LogFatal ( \"This is a fatal error\" ); // Fatal errors which prevents the server or plugin from working, user must take action. logger . LogError ( \"This is an error\" ); // Errors, e.g. exceptions, might require the user to take action logger . LogWarning ( \"This is a warning\" ); // Warnings, do es not require the user to take action logger . LogInformation ( \"This is some information\" ); // Generic log messages to inform the user logger . LogDebug ( \"This is a debug message\" ); // Logging debug specific stuff like variable values, states etc. logger . LogTrace ( \"This is a trace message\" ); // Tracing API, method calls etc (generates lots of logs) } } Note Order of log messages level is like this: (least messages) -> (most messages) Fatal > Error > Warning > Information > Debug > Trace . This means that, for example, when log level is set to \"Warning\", only \"Warning\", \"Error\" and \"Fatal\" messages will be shown. You can also register a custom ILogger (by implementing ILogger or inheriting BaseLogger / FormattedLogger / FileLogger ) to capture and handle log messages.","title":"Logging"},{"location":"development-guide/getting-started/logging/#logging","text":"RocketMod 5 uses ILogger service for logging. You can use it in your plugin like this: public class MyPlugin : Plugin { private readonly ILogger logger ; public MyPlugin ( IDependencyContainer container , ILogger logger ): base ( container ) { this . logger = logger ; } protected override async Task OnActivate ( bool isFromReload ) { logger . LogFatal ( \"This is a fatal error\" ); // Fatal errors which prevents the server or plugin from working, user must take action. logger . LogError ( \"This is an error\" ); // Errors, e.g. exceptions, might require the user to take action logger . LogWarning ( \"This is a warning\" ); // Warnings, do es not require the user to take action logger . LogInformation ( \"This is some information\" ); // Generic log messages to inform the user logger . LogDebug ( \"This is a debug message\" ); // Logging debug specific stuff like variable values, states etc. logger . LogTrace ( \"This is a trace message\" ); // Tracing API, method calls etc (generates lots of logs) } } Note Order of log messages level is like this: (least messages) -> (most messages) Fatal > Error > Warning > Information > Debug > Trace . This means that, for example, when log level is set to \"Warning\", only \"Warning\", \"Error\" and \"Fatal\" messages will be shown. You can also register a custom ILogger (by implementing ILogger or inheriting BaseLogger / FormattedLogger / FileLogger ) to capture and handle log messages.","title":"Logging"},{"location":"development-guide/getting-started/making-your-first-plugin/","text":"Making your first plugin \u00b6 In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin. Installing the IDE for coding \u00b6 Visual Studio Code \u00b6 You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects. Visual Studio \u00b6 If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2019 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify. Making a plugin from scratch \u00b6 First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 Now You have to add RocketMod and Unturned dependencies to your project. You can download latest Rocket.Unturned binaries here and latest Unturned binaries Assembly-CSharp.dll and Assembly-CSharp-firstpass.dll you should find them in Unturned/Unturned_Data/Managed directory of your Unturned files. You'll also need UnityEngine.dll and UnityEngine.CoreModule.dll which are both located in the same directory as Unturned binaries. You should create and save all these libraries in your projects directory. Create a folder called libraries or lib for them. Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $ \"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $ \"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-your-first-plugin","text":"In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#installing-the-ide-for-coding","text":"","title":"Installing the IDE for coding"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio-code","text":"You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects.","title":"Visual Studio Code"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio","text":"If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2019 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify.","title":"Visual Studio"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-a-plugin-from-scratch","text":"First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 Now You have to add RocketMod and Unturned dependencies to your project. You can download latest Rocket.Unturned binaries here and latest Unturned binaries Assembly-CSharp.dll and Assembly-CSharp-firstpass.dll you should find them in Unturned/Unturned_Data/Managed directory of your Unturned files. You'll also need UnityEngine.dll and UnityEngine.CoreModule.dll which are both located in the same directory as Unturned binaries. You should create and save all these libraries in your projects directory. Create a folder called libraries or lib for them. Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $ \"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $ \"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making a plugin from scratch"},{"location":"development-guide/getting-started/permissions/","text":"Permissions \u00b6 Permissions are used to determine which users can execute an action and which can not. RocketMod exposes two permissions related services: IPermissionChecker: Used to check if a user has a requested permission IPermissionProvider: Provides permissions and manages them (e.g. adding groups, adding or removing permissions, etc...) You can add these services like this to your plugin: namespace SamplePlugin { public class MyPluginMain : Plugin { private IPermissionChecker permissionChecker ; private IPermissionProvider permissionProvider ; public MyPluginMain ( IDependencyContainer container , IPermissionChecker permissionChecker , IPermissionProvider permissionProvider ) : base ( \"MyPlugin\" , container ) { this . permissionChecker = permissionChecker ; this . permissionProvider = permissionProvider ; } } } With the permission provider added we can begin going over its features. Managing Permissions \u00b6 Checking Permissions \u00b6 To check if a user has a permission, use CheckPermissionAsync . PermissionResult checkResult = await permissionChecker . CheckPermissionAsync ( user , \"rocket\" ); switch ( checkResult ) { case PermissionResult . Grant : // The permission was explicitly granted DoSomething (); break ; case PermissionResult . Deny : // The permission was explicitly denied ShowPermissionDeniedErrorMessage (); break ; case PermissionResult . Default : // The permission was not set up. Usually the action get's denied here as well. ShowPermissionDeniedErrorMessage (); break ; } Checking against All Permissions \u00b6 To check if a user has access to all requested permissions, use CheckHasAllPermissionsAsync . if ( await permissionChecker . CheckHasAllPermissionsAsync ( user , \"rocket\" , \"p\" , \"i\" ) == PermissionResult . Grant ) { // Do Something } Checking against Any Permission \u00b6 To check if a user has any permission from the requested permissions, use CheckHasAnyPermissionAsync . if ( await permissionChecker . CheckHasAnyPermissionAsync ( user , \"rocket\" , \"p\" , \"i\" ) == PermissionResult . Grant ) { // Do Something } Granting Permissions \u00b6 To grant a permission to a group or user, use AddPermissionAsync . // will return true if successful // Adds permission to user await permissionProvider . AddPermissionAsync ( user , \"rocket\" ); // Adds permission to group await permissionProvider . AddPermissionAsync ( group , \"rocket\" ); This will result in PermissionResult.Grant return on permission check. Remove Permission \u00b6 To remove a permission from a group or user, use RemovePermissionAsync . // will return true if removed else false // Remove permission from user await permissionProvider . RemovePermissionAsync ( user , \"rocket\" ); // Remove permission from group await permissionProvider . RemovePermissionAsync ( group , \"rocket\" ); This will result in PermissionResult.Default return on permission check. Add a explicitly Denied Permission \u00b6 To deny a permission from a group or user use AddDeniedPermissionAsync . This will override any explicit grants, inherited or not. // returns true if added else false // Add to user await permissionProvider . AddDeniedPermissionAsync ( user , \"heal\" ); // Add to group await permissionProvider . AddDeniedPermissionAsync ( group , \"heal\" ); This will result in PermissionResult.Denied return on permission check. Removing a explicitly Denied Permission \u00b6 To remove explicit denying of a permission, use RemoveDeniedPermissionAsync . // returns true if removed else false // Remove from user await permissionProvider . RemoveDeniedPermissionAsync ( user , \"heal\" ); // Remove from group await permissionProvider . RemoveDeniedPermissionAsync ( group , \"heal\" ); This will result in PermissionResult.Default return on permission check. Managing Permission Groups \u00b6 Getting a Group \u00b6 To get a group by it's ID, use GetGroupAsync . IPermissionGroup group = await permissionProvider . GetGroupAsync ( \"vip\" ); Getting the Primary Permission Group of a User \u00b6 To get a user's primary group, use GetPrimaryGroupAsync . IPermissionGroup group = await permissionProvider . GetPrimaryGroupAsync ( user ); Getting All Permission Groups \u00b6 To get all permission groups, use GetGroupsAsync . IEnumerable < IPermissionGroup > groups = await permissionProvider . GetGroupsAsync (); Getting Permission Groups of a User \u00b6 To get permission groups of a user, use GetGroupsAsync(user) . IEnumerable < IPermissionGroup > groups = await permissionProvider . GetGroupsAsync ( user ); Add a User to a Permission Group \u00b6 To add a user to a permission group, use AddGroupAsync . IPermissionGroup group = await permissionProvider . GetGroupAsync ( \"vip\" ); if ( group == null ) return ; // Group doesnt exist await permissionProvider . AddGroupAsync ( user , group ); Removing a Permission Group \u00b6 To remove a user from a permission group, use RemoveGroupAsync . IPermissionGroup group = permissionProvider . GetGroupAsync ( \"vip\" ); if ( group == null ) return ; // Group doesnt exist await permissionProvider . RemoveGroupAsync ( user , group ); Creating a Permission Group \u00b6 To create a new group, use CreateGroupAsync : await permissionProvider . CreateGroupAsync ( new PermissionGroup () { Id = \"vip\" , Name = \"VIP\" , ... }); Deleting a Permission Group \u00b6 To delete a group, use DeleteGroupAsync : await permissionProvider . DeleteGroupAsync ( group ); Updating a Permission Group \u00b6 To updates a group, use UpdateGroupAsync : var group = await permissionProvider . GetGroupAsync ( \"vip\" ); // Note: It is not guaranteed that you can change a Group's ID after it has been set. group . Name = \"Gold\" ; await permissionProvider . UpdateGroupAsync ( group ); Loading, Saving and Reloading the Permissions \u00b6 await permissionProvider . LoadAsync ( context ); // load from a config context await permissionProvider . SaveAsync (); // save to config await permissionProvider . ReloadAsync (); // reload from config Best Practices \u00b6 Usually you should deny actions when PermissionResult.Default is returned on requested permissions. Only do not deny if you want an action to be allowed by default, not denied. Do not use permission checks in commands, use child commands instead, which always have their own permissions defined by RocketMod.","title":"Permissions"},{"location":"development-guide/getting-started/permissions/#permissions","text":"Permissions are used to determine which users can execute an action and which can not. RocketMod exposes two permissions related services: IPermissionChecker: Used to check if a user has a requested permission IPermissionProvider: Provides permissions and manages them (e.g. adding groups, adding or removing permissions, etc...) You can add these services like this to your plugin: namespace SamplePlugin { public class MyPluginMain : Plugin { private IPermissionChecker permissionChecker ; private IPermissionProvider permissionProvider ; public MyPluginMain ( IDependencyContainer container , IPermissionChecker permissionChecker , IPermissionProvider permissionProvider ) : base ( \"MyPlugin\" , container ) { this . permissionChecker = permissionChecker ; this . permissionProvider = permissionProvider ; } } } With the permission provider added we can begin going over its features.","title":"Permissions"},{"location":"development-guide/getting-started/permissions/#managing-permissions","text":"","title":"Managing Permissions"},{"location":"development-guide/getting-started/permissions/#checking-permissions","text":"To check if a user has a permission, use CheckPermissionAsync . PermissionResult checkResult = await permissionChecker . CheckPermissionAsync ( user , \"rocket\" ); switch ( checkResult ) { case PermissionResult . Grant : // The permission was explicitly granted DoSomething (); break ; case PermissionResult . Deny : // The permission was explicitly denied ShowPermissionDeniedErrorMessage (); break ; case PermissionResult . Default : // The permission was not set up. Usually the action get's denied here as well. ShowPermissionDeniedErrorMessage (); break ; }","title":"Checking Permissions"},{"location":"development-guide/getting-started/permissions/#checking-against-all-permissions","text":"To check if a user has access to all requested permissions, use CheckHasAllPermissionsAsync . if ( await permissionChecker . CheckHasAllPermissionsAsync ( user , \"rocket\" , \"p\" , \"i\" ) == PermissionResult . Grant ) { // Do Something }","title":"Checking against All Permissions"},{"location":"development-guide/getting-started/permissions/#checking-against-any-permission","text":"To check if a user has any permission from the requested permissions, use CheckHasAnyPermissionAsync . if ( await permissionChecker . CheckHasAnyPermissionAsync ( user , \"rocket\" , \"p\" , \"i\" ) == PermissionResult . Grant ) { // Do Something }","title":"Checking against Any Permission"},{"location":"development-guide/getting-started/permissions/#granting-permissions","text":"To grant a permission to a group or user, use AddPermissionAsync . // will return true if successful // Adds permission to user await permissionProvider . AddPermissionAsync ( user , \"rocket\" ); // Adds permission to group await permissionProvider . AddPermissionAsync ( group , \"rocket\" ); This will result in PermissionResult.Grant return on permission check.","title":"Granting Permissions"},{"location":"development-guide/getting-started/permissions/#remove-permission","text":"To remove a permission from a group or user, use RemovePermissionAsync . // will return true if removed else false // Remove permission from user await permissionProvider . RemovePermissionAsync ( user , \"rocket\" ); // Remove permission from group await permissionProvider . RemovePermissionAsync ( group , \"rocket\" ); This will result in PermissionResult.Default return on permission check.","title":"Remove Permission"},{"location":"development-guide/getting-started/permissions/#add-a-explicitly-denied-permission","text":"To deny a permission from a group or user use AddDeniedPermissionAsync . This will override any explicit grants, inherited or not. // returns true if added else false // Add to user await permissionProvider . AddDeniedPermissionAsync ( user , \"heal\" ); // Add to group await permissionProvider . AddDeniedPermissionAsync ( group , \"heal\" ); This will result in PermissionResult.Denied return on permission check.","title":"Add a explicitly Denied Permission"},{"location":"development-guide/getting-started/permissions/#removing-a-explicitly-denied-permission","text":"To remove explicit denying of a permission, use RemoveDeniedPermissionAsync . // returns true if removed else false // Remove from user await permissionProvider . RemoveDeniedPermissionAsync ( user , \"heal\" ); // Remove from group await permissionProvider . RemoveDeniedPermissionAsync ( group , \"heal\" ); This will result in PermissionResult.Default return on permission check.","title":"Removing a explicitly Denied Permission"},{"location":"development-guide/getting-started/permissions/#managing-permission-groups","text":"","title":"Managing Permission Groups"},{"location":"development-guide/getting-started/permissions/#getting-a-group","text":"To get a group by it's ID, use GetGroupAsync . IPermissionGroup group = await permissionProvider . GetGroupAsync ( \"vip\" );","title":"Getting a Group"},{"location":"development-guide/getting-started/permissions/#getting-the-primary-permission-group-of-a-user","text":"To get a user's primary group, use GetPrimaryGroupAsync . IPermissionGroup group = await permissionProvider . GetPrimaryGroupAsync ( user );","title":"Getting the Primary Permission Group of a User"},{"location":"development-guide/getting-started/permissions/#getting-all-permission-groups","text":"To get all permission groups, use GetGroupsAsync . IEnumerable < IPermissionGroup > groups = await permissionProvider . GetGroupsAsync ();","title":"Getting All Permission Groups"},{"location":"development-guide/getting-started/permissions/#getting-permission-groups-of-a-user","text":"To get permission groups of a user, use GetGroupsAsync(user) . IEnumerable < IPermissionGroup > groups = await permissionProvider . GetGroupsAsync ( user );","title":"Getting Permission Groups of a User"},{"location":"development-guide/getting-started/permissions/#add-a-user-to-a-permission-group","text":"To add a user to a permission group, use AddGroupAsync . IPermissionGroup group = await permissionProvider . GetGroupAsync ( \"vip\" ); if ( group == null ) return ; // Group doesnt exist await permissionProvider . AddGroupAsync ( user , group );","title":"Add a User to a Permission Group"},{"location":"development-guide/getting-started/permissions/#removing-a-permission-group","text":"To remove a user from a permission group, use RemoveGroupAsync . IPermissionGroup group = permissionProvider . GetGroupAsync ( \"vip\" ); if ( group == null ) return ; // Group doesnt exist await permissionProvider . RemoveGroupAsync ( user , group );","title":"Removing a Permission Group"},{"location":"development-guide/getting-started/permissions/#creating-a-permission-group","text":"To create a new group, use CreateGroupAsync : await permissionProvider . CreateGroupAsync ( new PermissionGroup () { Id = \"vip\" , Name = \"VIP\" , ... });","title":"Creating a Permission Group"},{"location":"development-guide/getting-started/permissions/#deleting-a-permission-group","text":"To delete a group, use DeleteGroupAsync : await permissionProvider . DeleteGroupAsync ( group );","title":"Deleting a Permission Group"},{"location":"development-guide/getting-started/permissions/#updating-a-permission-group","text":"To updates a group, use UpdateGroupAsync : var group = await permissionProvider . GetGroupAsync ( \"vip\" ); // Note: It is not guaranteed that you can change a Group's ID after it has been set. group . Name = \"Gold\" ; await permissionProvider . UpdateGroupAsync ( group );","title":"Updating a Permission Group"},{"location":"development-guide/getting-started/permissions/#loading-saving-and-reloading-the-permissions","text":"await permissionProvider . LoadAsync ( context ); // load from a config context await permissionProvider . SaveAsync (); // save to config await permissionProvider . ReloadAsync (); // reload from config","title":"Loading, Saving and Reloading the Permissions"},{"location":"development-guide/getting-started/permissions/#best-practices","text":"Usually you should deny actions when PermissionResult.Default is returned on requested permissions. Only do not deny if you want an action to be allowed by default, not denied. Do not use permission checks in commands, use child commands instead, which always have their own permissions defined by RocketMod.","title":"Best Practices"},{"location":"development-guide/getting-started/scheduling/","text":"Scheduling \u00b6 RocketMod 5 includes a ITaskScheduler interface which allows to control tasks in a consistent way. Overview \u00b6 With the TaskScheduler you can schedule a task to be run on: frame updates (same as Update in Unity). physics updates (same as FixedUpdate in Unity). seperate thread frame updates. Tasks are automatically destroyed on reloads and must be registered again in your plugins OnActivate() method. Getting Started \u00b6 To start you first need to pass the ITaskScheduler through the constructor of your plugin. using Rocket.API.DependencyInjection ; using Rocket.API.Scheduler ; using Rocket.Core.Plugins ; namespace SamplePlugin { public class SamplePlugin : Plugin { private ITaskScheduler taskScheduler ; public SamplePlugin ( IDependencyContainer container , ITaskScheduler taskScheduler ): base ( \"Sample Plugin\" , container ) { this . taskScheduler = taskScheduler ; } } } Once you have done that, you can begin to schedule your tasks. ScheduleEveryFrame \u00b6 Schedules a task to run on every frame update. protected override async Task OnActivate ( bool isFromReload ) { // The \"My custom Task\" parameter is the description for your task. It // should be something that can identify your plugin and the exact task. // It will be shown to the user if an error occurs or when the user manages // tasks manually. taskScheduler . ScheduleEveryFrame ( this , SampleTask , \"My custom Task\" ); } private void SampleTask () { // Do something... } ScheduleNextFrame \u00b6 Schedules a task to run on the next frame update and will run only once. This is useful if you need to access Game or Engine APIs which are not thread safe. taskScheduler . ScheduleNextFrame ( this , SampleTask , \"My custom Task\" ); ScheduleEveryPhysicUpdate \u00b6 Schedules a task to run on every physics update frame. taskScheduler . ScheduleEveryPhysicUpdate ( this , SampleTask , \"My custom Task\" ); Note : Physics update frame definition depends on the engine and game used. For Unity, it is the equivalent of \"FixedUpdate\". You should use Physic Update when you want to apply physics, e.g. when applying force to an object. ScheduleNextPhysicsUpdate \u00b6 Schedules a task to run on the next physics update frame and will run only once. taskScheduler . ScheduleNextPhysicUpdate ( this , SampleTask , \"My custom Task\" ); Note : Physics update frame definition depends on the engine and game used. For Unity, it is the equivalent of \"FixedUpdate\". You should use Physic Update when you want to apply physics, e.g. when applying force to an object. ScheduleEveryAsyncFrame \u00b6 Schedules a task to run on every frame on a seperate thread. Running on async frames is vital for performance if your task is doing heavy calculations and causing delays. This will prevent the server from freezing in such cases. taskScheduler . ScheduleEveryAsyncFrame ( this , SampleTask , \"My custom Task\" ); Note : Keep in mind that in most cases you can not access Game or Engine APIs from separate threads. ScheduleNextAsyncFrame \u00b6 Schedules a task to be run on the next frame in a seperate thread once. Running on async frames is vital for performance if your task is doing heavy calculations and causing delays. This will prevent the server from freezing in such cases. taskScheduler . ScheduleNextAsyncFrame ( this , SampleTask , \"My custom Task\" ); Note : Keep in mind that in most cases you can not access Game or Engine APIs from separate threads. ScheduleDelayed \u00b6 Schedules a task to be run once after a set delay time. Can be configured to run the main thread or on a seperate thread. TimeSpan runAfter = TimeSpan . FromSeconds ( 15 ); // Run after 15 seconds taskScheduler . ScheduleDelayed ( this , SampleTask , \"My custom Task\" , runAfter , true ); // Async, runs on separate thread taskScheduler . ScheduleDelayed ( this , SampleTask , \"My custom Task\" , runAfter ); // Sync, runs on main thread ScheduleAt \u00b6 Schedules a task to be run at the given time. The time is based on Utc timezone. Keep in mind that the execution time is not exact, but within a few milliseconds depending on the server load. // Run after 15 seconds DateTime runTime = DateTime . UtcNow + TimeSpan . FromSeconds ( 15 ); taskScheduler . ScheduleAt ( this , SampleTask , \"My custom Task\" , runTime , true ); // Async, runs on separate thread taskScheduler . ScheduleAt ( this , SampleTask , \"My custom Task\" , runTime ); // Sync, runs on main thread SchedulePeriodically \u00b6 Schedules a task to be run every set amount of time and with an optional first delay. Can be configured to run on main thread or a seperate thread. TimeSpan runEvery = TimeSpan . FromSeconds ( 30 ); // Run every 30 seconds TimeSpan runAfter = TuneSpan . FromSecond ( 5 ); // After a first 5 seconds delay taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , null , true ); // Async, runs on a separate thread taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , runAfter , true ); // Delayed async taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery ); // Sync, runs on main threasd taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , runAfter ); // Delayed sync RunOnMainThread \u00b6 Schedules a task via ScheduleNextFrame if the current thread is no the main thread. Otherwise, it will run the task directly. taskScheduler . RunOnMainThread ( this , SampleTask , \"My custom Task\" ); Extra \u00b6 Getting a List of Active Tasks \u00b6 This will return all scheduled tasks. var pendingTasks = taskScheduler . Tasks ; Cancelling a Task \u00b6 ITask myTask = taskScheduler . ScheduleEveryFrame ( this , SampleTask , \"My Task Description\" ); myTask . Cancel (); Passing Arguments to Tasks when Scheduling \u00b6 protected override async Task OnActivate ( bool isFromReload ) { string myArgument = \"A little touch of wizard\" ; taskScheduler . ScheduleNextFrame ( this , () => SampleTask ( myArgument ), \"Wizard's Sample Task\" ); } public void SampleTask ( string sampleParameter ) { Logger . LogInformation ( sampleParameter ); } Returning Data with Callbacks \u00b6 You can't not return directly from tasks, however you can create a callback. protected override async Task OnActivate ( bool isFromReload ) { taskScheduler . ScheduleNextAsyncFrame ( this , () => SampleTask ( SampleTaskCallback ), \"SampleMethod\" ); } public void SampleTask ( Action < MyObject > callback ) { MyObject sampleData = // Do Something... // Run callback on same thread: callback ?. Invoke ( sampleData ); // Run callback on main thread: if ( callback != null ) { taskScheduler . RunOnMainThread ( this , () => callback . Invoke ( sampleData ), \"My Callback\" ); } } public void SampleTaskCallback ( MyObject sampleReturn ) { // Do some more things... } Best Practices \u00b6 Always use the TaskScheduler if you need to run tasks in a separate thread. The TaskScheduler provides RocketMod a uniform way to handle tasks in a consistent way. For example, this way RocketMod can dynamically schedule and run tasks based on current server load. In order to achieve this, Don't create your own threads. Don't use the Timer class for running tasks periodically. Do not use engine specific components like MonoBehaviour's for functions like Update(), FixedUpdate(), etc. Use the TaskScheduler instead. Because RocketMod can not control custom plugin threads, this would result in lots of threads with no pooling. As a result, a lot of context switches would occur which would drastically slow down performance. Plugins also often do not create and handle threads correctly, resulting in endless loops and poor performance. RocketMod uses WaitHandle s to ensure that threads do not run in empty loops and also dynamically schedules tasks to always ensure best performance.","title":"Scheduling"},{"location":"development-guide/getting-started/scheduling/#scheduling","text":"RocketMod 5 includes a ITaskScheduler interface which allows to control tasks in a consistent way.","title":"Scheduling"},{"location":"development-guide/getting-started/scheduling/#overview","text":"With the TaskScheduler you can schedule a task to be run on: frame updates (same as Update in Unity). physics updates (same as FixedUpdate in Unity). seperate thread frame updates. Tasks are automatically destroyed on reloads and must be registered again in your plugins OnActivate() method.","title":"Overview"},{"location":"development-guide/getting-started/scheduling/#getting-started","text":"To start you first need to pass the ITaskScheduler through the constructor of your plugin. using Rocket.API.DependencyInjection ; using Rocket.API.Scheduler ; using Rocket.Core.Plugins ; namespace SamplePlugin { public class SamplePlugin : Plugin { private ITaskScheduler taskScheduler ; public SamplePlugin ( IDependencyContainer container , ITaskScheduler taskScheduler ): base ( \"Sample Plugin\" , container ) { this . taskScheduler = taskScheduler ; } } } Once you have done that, you can begin to schedule your tasks.","title":"Getting Started"},{"location":"development-guide/getting-started/scheduling/#scheduleeveryframe","text":"Schedules a task to run on every frame update. protected override async Task OnActivate ( bool isFromReload ) { // The \"My custom Task\" parameter is the description for your task. It // should be something that can identify your plugin and the exact task. // It will be shown to the user if an error occurs or when the user manages // tasks manually. taskScheduler . ScheduleEveryFrame ( this , SampleTask , \"My custom Task\" ); } private void SampleTask () { // Do something... }","title":"ScheduleEveryFrame"},{"location":"development-guide/getting-started/scheduling/#schedulenextframe","text":"Schedules a task to run on the next frame update and will run only once. This is useful if you need to access Game or Engine APIs which are not thread safe. taskScheduler . ScheduleNextFrame ( this , SampleTask , \"My custom Task\" );","title":"ScheduleNextFrame"},{"location":"development-guide/getting-started/scheduling/#scheduleeveryphysicupdate","text":"Schedules a task to run on every physics update frame. taskScheduler . ScheduleEveryPhysicUpdate ( this , SampleTask , \"My custom Task\" ); Note : Physics update frame definition depends on the engine and game used. For Unity, it is the equivalent of \"FixedUpdate\". You should use Physic Update when you want to apply physics, e.g. when applying force to an object.","title":"ScheduleEveryPhysicUpdate"},{"location":"development-guide/getting-started/scheduling/#schedulenextphysicsupdate","text":"Schedules a task to run on the next physics update frame and will run only once. taskScheduler . ScheduleNextPhysicUpdate ( this , SampleTask , \"My custom Task\" ); Note : Physics update frame definition depends on the engine and game used. For Unity, it is the equivalent of \"FixedUpdate\". You should use Physic Update when you want to apply physics, e.g. when applying force to an object.","title":"ScheduleNextPhysicsUpdate"},{"location":"development-guide/getting-started/scheduling/#scheduleeveryasyncframe","text":"Schedules a task to run on every frame on a seperate thread. Running on async frames is vital for performance if your task is doing heavy calculations and causing delays. This will prevent the server from freezing in such cases. taskScheduler . ScheduleEveryAsyncFrame ( this , SampleTask , \"My custom Task\" ); Note : Keep in mind that in most cases you can not access Game or Engine APIs from separate threads.","title":"ScheduleEveryAsyncFrame"},{"location":"development-guide/getting-started/scheduling/#schedulenextasyncframe","text":"Schedules a task to be run on the next frame in a seperate thread once. Running on async frames is vital for performance if your task is doing heavy calculations and causing delays. This will prevent the server from freezing in such cases. taskScheduler . ScheduleNextAsyncFrame ( this , SampleTask , \"My custom Task\" ); Note : Keep in mind that in most cases you can not access Game or Engine APIs from separate threads.","title":"ScheduleNextAsyncFrame"},{"location":"development-guide/getting-started/scheduling/#scheduledelayed","text":"Schedules a task to be run once after a set delay time. Can be configured to run the main thread or on a seperate thread. TimeSpan runAfter = TimeSpan . FromSeconds ( 15 ); // Run after 15 seconds taskScheduler . ScheduleDelayed ( this , SampleTask , \"My custom Task\" , runAfter , true ); // Async, runs on separate thread taskScheduler . ScheduleDelayed ( this , SampleTask , \"My custom Task\" , runAfter ); // Sync, runs on main thread","title":"ScheduleDelayed"},{"location":"development-guide/getting-started/scheduling/#scheduleat","text":"Schedules a task to be run at the given time. The time is based on Utc timezone. Keep in mind that the execution time is not exact, but within a few milliseconds depending on the server load. // Run after 15 seconds DateTime runTime = DateTime . UtcNow + TimeSpan . FromSeconds ( 15 ); taskScheduler . ScheduleAt ( this , SampleTask , \"My custom Task\" , runTime , true ); // Async, runs on separate thread taskScheduler . ScheduleAt ( this , SampleTask , \"My custom Task\" , runTime ); // Sync, runs on main thread","title":"ScheduleAt"},{"location":"development-guide/getting-started/scheduling/#scheduleperiodically","text":"Schedules a task to be run every set amount of time and with an optional first delay. Can be configured to run on main thread or a seperate thread. TimeSpan runEvery = TimeSpan . FromSeconds ( 30 ); // Run every 30 seconds TimeSpan runAfter = TuneSpan . FromSecond ( 5 ); // After a first 5 seconds delay taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , null , true ); // Async, runs on a separate thread taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , runAfter , true ); // Delayed async taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery ); // Sync, runs on main threasd taskScheduler . SchedulePeriodically ( this , SampleTask , \"My custom Task\" , runEvery , runAfter ); // Delayed sync","title":"SchedulePeriodically"},{"location":"development-guide/getting-started/scheduling/#runonmainthread","text":"Schedules a task via ScheduleNextFrame if the current thread is no the main thread. Otherwise, it will run the task directly. taskScheduler . RunOnMainThread ( this , SampleTask , \"My custom Task\" );","title":"RunOnMainThread"},{"location":"development-guide/getting-started/scheduling/#extra","text":"","title":"Extra"},{"location":"development-guide/getting-started/scheduling/#getting-a-list-of-active-tasks","text":"This will return all scheduled tasks. var pendingTasks = taskScheduler . Tasks ;","title":"Getting a List of Active Tasks"},{"location":"development-guide/getting-started/scheduling/#cancelling-a-task","text":"ITask myTask = taskScheduler . ScheduleEveryFrame ( this , SampleTask , \"My Task Description\" ); myTask . Cancel ();","title":"Cancelling a Task"},{"location":"development-guide/getting-started/scheduling/#passing-arguments-to-tasks-when-scheduling","text":"protected override async Task OnActivate ( bool isFromReload ) { string myArgument = \"A little touch of wizard\" ; taskScheduler . ScheduleNextFrame ( this , () => SampleTask ( myArgument ), \"Wizard's Sample Task\" ); } public void SampleTask ( string sampleParameter ) { Logger . LogInformation ( sampleParameter ); }","title":"Passing Arguments to Tasks when Scheduling"},{"location":"development-guide/getting-started/scheduling/#returning-data-with-callbacks","text":"You can't not return directly from tasks, however you can create a callback. protected override async Task OnActivate ( bool isFromReload ) { taskScheduler . ScheduleNextAsyncFrame ( this , () => SampleTask ( SampleTaskCallback ), \"SampleMethod\" ); } public void SampleTask ( Action < MyObject > callback ) { MyObject sampleData = // Do Something... // Run callback on same thread: callback ?. Invoke ( sampleData ); // Run callback on main thread: if ( callback != null ) { taskScheduler . RunOnMainThread ( this , () => callback . Invoke ( sampleData ), \"My Callback\" ); } } public void SampleTaskCallback ( MyObject sampleReturn ) { // Do some more things... }","title":"Returning Data with Callbacks"},{"location":"development-guide/getting-started/scheduling/#best-practices","text":"Always use the TaskScheduler if you need to run tasks in a separate thread. The TaskScheduler provides RocketMod a uniform way to handle tasks in a consistent way. For example, this way RocketMod can dynamically schedule and run tasks based on current server load. In order to achieve this, Don't create your own threads. Don't use the Timer class for running tasks periodically. Do not use engine specific components like MonoBehaviour's for functions like Update(), FixedUpdate(), etc. Use the TaskScheduler instead. Because RocketMod can not control custom plugin threads, this would result in lots of threads with no pooling. As a result, a lot of context switches would occur which would drastically slow down performance. Plugins also often do not create and handle threads correctly, resulting in endless loops and poor performance. RocketMod uses WaitHandle s to ensure that threads do not run in empty loops and also dynamically schedules tasks to always ensure best performance.","title":"Best Practices"},{"location":"development-guide/misc/events/","text":"List of all RocketMod Events \u00b6 Rocket.Core \u00b6 Core Namespace PreCommandExecutionEvent Rocket.Core.Commands.Events ImplementationReadyEvent Rocket.Core.Implementation.Events PlayerBanEvent Rocket.Core.Player.Events PlayerChatEvent Rocket.Core.Player.Events PlayerConnectedEvent Rocket.Core.Player.Events PlayerDamageEvent Rocket.Core.Player.Events PlayerDeathEvent Rocket.Core.Player.Events PlayerDisconnectedEvent Rocket.Core.Player.Events PlayerKickEvent Rocket.Core.Player.Events PlayerMoveEvent Rocket.Core.Player.Events PlayerPreConnectEvent Rocket.Core.Player.Events PlayerRespawnEvent Rocket.Core.Player.Events PlayerUnbanEvent Rocket.Core.Player.Events PluginActivateEvent Rocket.Core.Plugins.Events PluginActivatedEvent Rocket.Core.Plugins.Events PluginDeactivateEvent Rocket.Core.Plugins.Events PluginDeactivatedEvent Rocket.Core.Plugins.Events PluginManagerInitEvent Rocket.Core.Plugins.Events UserBanEvent Rocket.Core.User.Events UserChatEvent Rocket.Core.User.Events UserConnectedEvent Rocket.Core.User.Events UserDisconnectedEvent Rocket.Core.User.Events UserKickEvent Rocket.Core.User.Events UserUnbanEvent Rocket.Core.User.Events Rocket.Unturned \u00b6 Unturned Namespace UnturnedPlayerChatEvent Rocket.Unturned.Player.Events UnturnedPlayerDamagedEvent Rocket.Unturned.Player.Events UnturnedPlayerDeadEvent Rocket.Unturned.Player.Events UnturnedPlayerPreConnectEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateBleedingEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateBrokenEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateExperienceEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateFoodEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateGestureEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateHealthEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateLifeEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateStanceEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateStatEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateVirusEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateWaterEvent Rocket.Unturned.Player.Events","title":"List of all RocketMod Events"},{"location":"development-guide/misc/events/#list-of-all-rocketmod-events","text":"","title":"List of all RocketMod Events"},{"location":"development-guide/misc/events/#rocketcore","text":"Core Namespace PreCommandExecutionEvent Rocket.Core.Commands.Events ImplementationReadyEvent Rocket.Core.Implementation.Events PlayerBanEvent Rocket.Core.Player.Events PlayerChatEvent Rocket.Core.Player.Events PlayerConnectedEvent Rocket.Core.Player.Events PlayerDamageEvent Rocket.Core.Player.Events PlayerDeathEvent Rocket.Core.Player.Events PlayerDisconnectedEvent Rocket.Core.Player.Events PlayerKickEvent Rocket.Core.Player.Events PlayerMoveEvent Rocket.Core.Player.Events PlayerPreConnectEvent Rocket.Core.Player.Events PlayerRespawnEvent Rocket.Core.Player.Events PlayerUnbanEvent Rocket.Core.Player.Events PluginActivateEvent Rocket.Core.Plugins.Events PluginActivatedEvent Rocket.Core.Plugins.Events PluginDeactivateEvent Rocket.Core.Plugins.Events PluginDeactivatedEvent Rocket.Core.Plugins.Events PluginManagerInitEvent Rocket.Core.Plugins.Events UserBanEvent Rocket.Core.User.Events UserChatEvent Rocket.Core.User.Events UserConnectedEvent Rocket.Core.User.Events UserDisconnectedEvent Rocket.Core.User.Events UserKickEvent Rocket.Core.User.Events UserUnbanEvent Rocket.Core.User.Events","title":"Rocket.Core"},{"location":"development-guide/misc/events/#rocketunturned","text":"Unturned Namespace UnturnedPlayerChatEvent Rocket.Unturned.Player.Events UnturnedPlayerDamagedEvent Rocket.Unturned.Player.Events UnturnedPlayerDeadEvent Rocket.Unturned.Player.Events UnturnedPlayerPreConnectEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateBleedingEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateBrokenEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateExperienceEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateFoodEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateGestureEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateHealthEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateLifeEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateStanceEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateStatEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateVirusEvent Rocket.Unturned.Player.Events UnturnedPlayerUpdateWaterEvent Rocket.Unturned.Player.Events","title":"Rocket.Unturned"},{"location":"development-guide/misc/migration-guide/","text":"Migration Guide \u00b6 When migrating to RocketMod 5, you should first reference the NuGet packages: Rocket.API, Rocket.Core and (if your plugin depends on Rocket.Unturned features or the Unturned dlls) Rocket.Unturned. You will have to reference UnityEngine.dll yourself as we can not provide it because of licensing issues. Please read Services before continuing. After that, change <MyPlugin> : RocketPlugin<X> part of your main plugin file to <MyPlugin> : Plugin . Now update your API usage, below you can see what has changed. Common API Changes \u00b6 Old API New API UnturnedChat PlayerManager RocketPlugin<> Plugin IRocketCommand ICommand, [Command] R.Translation ITranslationProvider Logger.Debug / Logger.Info ... Logging Any event (OnXXXX) (e.g. OnPlayerConnected) Eventing IRocketPermissionsProvider Permissions R and U Services Plugin.Configuration Configurations Update(), FixedUpdate(), etc... Scheduling MonoBehaviours \u00b6 If you want to make true universal plugins, you should avoid using MonoBehaviour under all circumstances. You can use the TaskScheduler instead. Only use MonoBehaviours if you need to add components which need access to other component data and hooks (e.g. OnCollision, Rigidbodies, etc).","title":"Migration Guide"},{"location":"development-guide/misc/migration-guide/#migration-guide","text":"When migrating to RocketMod 5, you should first reference the NuGet packages: Rocket.API, Rocket.Core and (if your plugin depends on Rocket.Unturned features or the Unturned dlls) Rocket.Unturned. You will have to reference UnityEngine.dll yourself as we can not provide it because of licensing issues. Please read Services before continuing. After that, change <MyPlugin> : RocketPlugin<X> part of your main plugin file to <MyPlugin> : Plugin . Now update your API usage, below you can see what has changed.","title":"Migration Guide"},{"location":"development-guide/misc/migration-guide/#common-api-changes","text":"Old API New API UnturnedChat PlayerManager RocketPlugin<> Plugin IRocketCommand ICommand, [Command] R.Translation ITranslationProvider Logger.Debug / Logger.Info ... Logging Any event (OnXXXX) (e.g. OnPlayerConnected) Eventing IRocketPermissionsProvider Permissions R and U Services Plugin.Configuration Configurations Update(), FixedUpdate(), etc... Scheduling","title":"Common API Changes"},{"location":"development-guide/misc/migration-guide/#monobehaviours","text":"If you want to make true universal plugins, you should avoid using MonoBehaviour under all circumstances. You can use the TaskScheduler instead. Only use MonoBehaviours if you need to add components which need access to other component data and hooks (e.g. OnCollision, Rigidbodies, etc).","title":"MonoBehaviours"},{"location":"development-guide/misc/services/","text":"List of all RocketMod Services \u00b6 Service Job ICommandHandler Executing commands ICommandProvider Providing commands IConfiguration Reading/Saving Configrations IDependencyContainer Inversion of Control IDependencyResolver Resolving Services IEconomyProvider Managing and providing economy IEventBus Eventing IHost Service for RocketMod Host ILogger Logging IRuntime Bootstrapping RocketMod IPermissionChecker Permission checks IPermissionProvider Permission management (e.g adding / removing permissions and groups) IPlayerManager Managing players IPluginLoader Loading and managing plugins ITranslationProvider Providing translations and I18N ITaskScheduler Scheduling IUserManager Managing Users","title":"List of all RocketMod Services"},{"location":"development-guide/misc/services/#list-of-all-rocketmod-services","text":"Service Job ICommandHandler Executing commands ICommandProvider Providing commands IConfiguration Reading/Saving Configrations IDependencyContainer Inversion of Control IDependencyResolver Resolving Services IEconomyProvider Managing and providing economy IEventBus Eventing IHost Service for RocketMod Host ILogger Logging IRuntime Bootstrapping RocketMod IPermissionChecker Permission checks IPermissionProvider Permission management (e.g adding / removing permissions and groups) IPlayerManager Managing players IPluginLoader Loading and managing plugins ITranslationProvider Providing translations and I18N ITaskScheduler Scheduling IUserManager Managing Users","title":"List of all RocketMod Services"},{"location":"user-guide/installation/","text":"This page is yet to be written, but for now, here is the legacy installation instructions for RocketMod: \u00b6 Downloading RocketMod \u00b6 We will start by downlading the lastest RocketMod build from GitHub . From here, download the Rocket.Unturned.zip , underneath RocketMod Legacy #XXXX . Or alternatively, from this . Installing RocketMod \u00b6 Open your servers Unturned directory and go to the Modules folder. Extract the contents of the freshly downloaded zip to here. After extracting start your server. The first start might take some time as RocketMod will download a bunch of other required files. After that, it will automatically create the required folders and files inside your server directory ( Unturned/servers/<yourserver>/Rocket ). You can now start installing plugins .","title":"Installation"},{"location":"user-guide/installation/#this-page-is-yet-to-be-written-but-for-now-here-is-the-legacy-installation-instructions-for-rocketmod","text":"","title":"This page is yet to be written, but for now, here is the legacy installation instructions for RocketMod:"},{"location":"user-guide/installation/#downloading-rocketmod","text":"We will start by downlading the lastest RocketMod build from GitHub . From here, download the Rocket.Unturned.zip , underneath RocketMod Legacy #XXXX . Or alternatively, from this .","title":"Downloading RocketMod"},{"location":"user-guide/installation/#installing-rocketmod","text":"Open your servers Unturned directory and go to the Modules folder. Extract the contents of the freshly downloaded zip to here. After extracting start your server. The first start might take some time as RocketMod will download a bunch of other required files. After that, it will automatically create the required folders and files inside your server directory ( Unturned/servers/<yourserver>/Rocket ). You can now start installing plugins .","title":"Installing RocketMod"},{"location":"user-guide/support/","text":"Support \u00b6 Discord (help and support) \u00b6 RocketMod has two different Discord servers: Discord for Server Owners \u00b6 On this Discord server you can ask for help related to topics like hosting servers, installing RocketMod, issues with plugins, etc. Join the Discord for Server Owners . Forums (help and support) \u00b6 We also have a forum where you can ask for support or discuss with others. Visit the RocketMod Forum . GitHub (bug reports and feature requests) \u00b6 You can report bugs and request features on GitHub. Please do not ask for help here. RocketMod General \u00b6 Most RocketMod related bugs and requests should reported here. Vist the RocketMod General GitHub Issue Tracker . RocketMod Unturned \u00b6 Unturned specific bugs and requests should be reported here. Vist the RocketMod Unturned GitHub Issue Tracker . RocketMod Eco \u00b6 Eco specific bugs and requests should be reported here. Vist the RocketMod Eco GitHub Issue Tracker .","title":"Support"},{"location":"user-guide/support/#support","text":"","title":"Support"},{"location":"user-guide/support/#discord-help-and-support","text":"RocketMod has two different Discord servers:","title":"Discord (help and support)"},{"location":"user-guide/support/#discord-for-server-owners","text":"On this Discord server you can ask for help related to topics like hosting servers, installing RocketMod, issues with plugins, etc. Join the Discord for Server Owners .","title":"Discord for Server Owners"},{"location":"user-guide/support/#forums-help-and-support","text":"We also have a forum where you can ask for support or discuss with others. Visit the RocketMod Forum .","title":"Forums (help and support)"},{"location":"user-guide/support/#github-bug-reports-and-feature-requests","text":"You can report bugs and request features on GitHub. Please do not ask for help here.","title":"GitHub (bug reports and feature requests)"},{"location":"user-guide/support/#rocketmod-general","text":"Most RocketMod related bugs and requests should reported here. Vist the RocketMod General GitHub Issue Tracker .","title":"RocketMod General"},{"location":"user-guide/support/#rocketmod-unturned","text":"Unturned specific bugs and requests should be reported here. Vist the RocketMod Unturned GitHub Issue Tracker .","title":"RocketMod Unturned"},{"location":"user-guide/support/#rocketmod-eco","text":"Eco specific bugs and requests should be reported here. Vist the RocketMod Eco GitHub Issue Tracker .","title":"RocketMod Eco"},{"location":"user-guide/configuration/configurations/","text":"","title":"Configurations"},{"location":"user-guide/configuration/permissions/","text":"","title":"Permissions"},{"location":"user-guide/configuration/plugins/","text":"","title":"Plugins"},{"location":"user-guide/configuration/translations/","text":"","title":"Translations"},{"location":"user-guide/plugins/installation/","text":"Installing plugins on your server \u00b6 As official Rocket plugins Harbor has been closed, you now have to look for plugins to download elsewhere. You can try finding them by searching for unturned plugin on Github.com Then You can download the latest release of the plugin like shown in the picture below However some plugins' repositories don't have releases then you have to build a plugin yourself. All plugins' git repos, that were on Rocket Harbor , are listed on Reddit Repository List","title":"Installation"},{"location":"user-guide/plugins/installation/#installing-plugins-on-your-server","text":"As official Rocket plugins Harbor has been closed, you now have to look for plugins to download elsewhere. You can try finding them by searching for unturned plugin on Github.com Then You can download the latest release of the plugin like shown in the picture below However some plugins' repositories don't have releases then you have to build a plugin yourself. All plugins' git repos, that were on Rocket Harbor , are listed on Reddit Repository List","title":"Installing plugins on your server"}]}