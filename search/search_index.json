{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the community-written user documentation for Legally Distinct Missile! Welcome \u00b6 Legally Distinct Missile, is the official Smarty Dressed Games' RocketMod fork. In December of 2019, RocketMod, the most widely used plugin framework for Unturned multiplayer servers, was discontinued by its maintainers. You can read their official farewell, and go more in-depth with an explanation, here . As RocketMod (now LDM), is still considered a necessity of hosting more-than-basic Unturned servers, we have decided to open up a Discord server, and this documentation, as an homage to the original RocketMod documentation and Discords, that provided the bulk of information and support for server owners. Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord. Installation \u00b6 Assuming you already have a vanilla Unturned server running, either locally through SteamCMD, or through a 3 rd party hosting provider, please follow the installation instructions, here . If you don't have a server, read our Getting Started with a New Server guide, here . (Coming soon)","title":"Home"},{"location":"#welcome","text":"Legally Distinct Missile, is the official Smarty Dressed Games' RocketMod fork. In December of 2019, RocketMod, the most widely used plugin framework for Unturned multiplayer servers, was discontinued by its maintainers. You can read their official farewell, and go more in-depth with an explanation, here . As RocketMod (now LDM), is still considered a necessity of hosting more-than-basic Unturned servers, we have decided to open up a Discord server, and this documentation, as an homage to the original RocketMod documentation and Discords, that provided the bulk of information and support for server owners. Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord.","title":"Welcome"},{"location":"#installation","text":"Assuming you already have a vanilla Unturned server running, either locally through SteamCMD, or through a 3 rd party hosting provider, please follow the installation instructions, here . If you don't have a server, read our Getting Started with a New Server guide, here . (Coming soon)","title":"Installation"},{"location":"about/documentation/","text":"This documentation is written and maintained by the LDM Community . Feel free to check out the repo and suggest edits, here . Special thanks to MCrow from RestoreMonarchy from letting me use his fork of the original Rocket documentation as a starting point. Technical Information \u00b6 We use MkDocs to create our documentation & guides. You can use basic html & markdown in the guides and also all the features of our theme mkdocs-material and the following extensions: admonition ( https://squidfunk.github.io/mkdocs-material/extensions/admonition/ ) meta ( https://squidfunk.github.io/mkdocs-material/extensions/metadata/ ) codehilite ( https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ ) toc ( https://squidfunk.github.io/mkdocs-material/extensions/permalinks/ ) pymdownx ( https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ ) You can see further examples of markdown here: https://github.com/squidfunk/mkdocs-material/blob/master/docs/specimen.md ( https://squidfunk.github.io/mkdocs-material/specimen/ )","title":"About this Documentation"},{"location":"about/documentation/#technical-information","text":"We use MkDocs to create our documentation & guides. You can use basic html & markdown in the guides and also all the features of our theme mkdocs-material and the following extensions: admonition ( https://squidfunk.github.io/mkdocs-material/extensions/admonition/ ) meta ( https://squidfunk.github.io/mkdocs-material/extensions/metadata/ ) codehilite ( https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ ) toc ( https://squidfunk.github.io/mkdocs-material/extensions/permalinks/ ) pymdownx ( https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ ) You can see further examples of markdown here: https://github.com/squidfunk/mkdocs-material/blob/master/docs/specimen.md ( https://squidfunk.github.io/mkdocs-material/specimen/ )","title":"Technical Information"},{"location":"development-guide/getting-started/commands/","text":"Adding Commands \u00b6 Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" . Implementing Commands \u00b6 There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute. 1. Registering Commands with IRocketCommand \u00b6 Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads. 2. Registering Commands with RocketCommand attribute \u00b6 The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"Adding Commands"},{"location":"development-guide/getting-started/commands/#adding-commands","text":"Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" .","title":"Adding Commands"},{"location":"development-guide/getting-started/commands/#implementing-commands","text":"There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute.","title":"Implementing Commands"},{"location":"development-guide/getting-started/commands/#1-registering-commands-with-irocketcommand","text":"Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads.","title":"1. Registering Commands with IRocketCommand"},{"location":"development-guide/getting-started/commands/#2-registering-commands-with-rocketcommand-attribute","text":"The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"2. Registering Commands with RocketCommand attribute"},{"location":"development-guide/getting-started/making-your-first-plugin/","text":"Making your first plugin \u00b6 In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin. Installing the IDE for coding \u00b6 Visual Studio Code \u00b6 You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects. Visual Studio \u00b6 If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2019 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify. Making a plugin from scratch \u00b6 First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 Now you will need to grab the dependicies from Unturned and for RocketMod. You can find LDM's files in your Unturned/Extras/Rocket.Unturned directory. You will also need Unturned binaries Assembly-CSharp.dll and Assembly-CSharp-firstpass.dll . You should find them in the Unturned/Unturned_Data/Managed directory of your Unturned files. You'll also need UnityEngine.dll and UnityEngine.CoreModule.dll which are both located in the same directory as Unturned binaries. You should create and save all these libraries in your projects directory. Create a folder called libraries or lib for them. Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $ \"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $ \"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-your-first-plugin","text":"In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#installing-the-ide-for-coding","text":"","title":"Installing the IDE for coding"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio-code","text":"You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects.","title":"Visual Studio Code"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio","text":"If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2019 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify.","title":"Visual Studio"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-a-plugin-from-scratch","text":"First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 Now you will need to grab the dependicies from Unturned and for RocketMod. You can find LDM's files in your Unturned/Extras/Rocket.Unturned directory. You will also need Unturned binaries Assembly-CSharp.dll and Assembly-CSharp-firstpass.dll . You should find them in the Unturned/Unturned_Data/Managed directory of your Unturned files. You'll also need UnityEngine.dll and UnityEngine.CoreModule.dll which are both located in the same directory as Unturned binaries. You should create and save all these libraries in your projects directory. Create a folder called libraries or lib for them. Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $ \"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $ \"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making a plugin from scratch"},{"location":"user-guide/installation/","text":"Installing Legally Distinct Missile \u00b6 After getting your server up and running, stop it and head over to it's Unturned/Extras directory. Copy the Rocket.Unturned folder, into Unturned/Modules . That's it! Start up your server again, and you should be greeted with this in your console... 3.21.5.0 Rocket Unturned v4.9.3.6 for Unturned v3.21.5.0 Alternatively, you can also download the latest version of LDM here . Stuck? We're always happy to help out over on the LDM Community Discord server! Installing Plugins \u00b6 To install plugins, simply copy the plugin .dll into the Unturned/Servers/your-server/Rocket/Plugins directory, and any libraries it requires into the Rocket/Libraries folder.","title":"Installation"},{"location":"user-guide/installation/#installing-legally-distinct-missile","text":"After getting your server up and running, stop it and head over to it's Unturned/Extras directory. Copy the Rocket.Unturned folder, into Unturned/Modules . That's it! Start up your server again, and you should be greeted with this in your console... 3.21.5.0 Rocket Unturned v4.9.3.6 for Unturned v3.21.5.0 Alternatively, you can also download the latest version of LDM here . Stuck? We're always happy to help out over on the LDM Community Discord server!","title":"Installing Legally Distinct Missile"},{"location":"user-guide/installation/#installing-plugins","text":"To install plugins, simply copy the plugin .dll into the Unturned/Servers/your-server/Rocket/Plugins directory, and any libraries it requires into the Rocket/Libraries folder.","title":"Installing Plugins"}]}