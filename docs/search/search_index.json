{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the community-written user documentation for Legally Distinct Missile! Legally Distinct Missile, is the official Smarty Dressed Games' RocketMod fork. In December of 2019, RocketMod, the most widely used plugin framework for Unturned multiplayer servers, was discontinued by its maintainers. You can read their official farewell, and go more in-depth with an explanation, here . As RocketMod (now LDM), is still considered a necessity of hosting more-than-basic Unturned servers, we have decided to open up a Discord server, and this documentation, as an homage to the original RocketMod documentation and Discords, that provided the bulk of information and support for server owners. Getting Started \u00b6 Start here by Installing LDM Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord.","title":"Home"},{"location":"#getting-started","text":"Start here by Installing LDM Need help getting started? If your just getting started with LDM, or have any questions, we highly suggest you join our Discord.","title":"Getting Started"},{"location":"about/documentation/","text":"Our documentation is generated using MkDocs, using the Material theme and pymdown-extensions. See requirements.txt in the repo . If you would like to help contribute to our documentation, join our Discord , or create a pull request on the GitHub repo . Any contribution is highly appreciated!","title":"Documentation"},{"location":"development-guide/getting-started/commands/","text":"Commands \u00b6 Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" . Implementing Commands \u00b6 There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute. 1. Registering Commands with IRocketCommand \u00b6 Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads. 2. Registering Commands with RocketCommand attribute \u00b6 The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"Commands"},{"location":"development-guide/getting-started/commands/#commands","text":"Commands are an interface for users and other plugins to trigger specific actions of your plugins. They are usually executed via chat, console, web interface or rcon. Example command: /kick PlayerA \"Some kick Reason\" .","title":"Commands"},{"location":"development-guide/getting-started/commands/#implementing-commands","text":"There are two ways to implement commands in RocketMod 4. The first one is by implementing the IRocketCommand interface, the second one is by using the [RocketCommand] attribute.","title":"Implementing Commands"},{"location":"development-guide/getting-started/commands/#1-registering-commands-with-irocketcommand","text":"Implement the IRocketCommand interface like this: using Rocket.API ; using Rocket.Unturned.Chat ; using System.Collections.Generic ; namespace ExamplePlugin.Commands { public class SampleCommand : IRocketCommand { public AllowedCaller AllowedCaller => AllowedCaller . Both ; public string Name => \"sample\" ; public string Help => \"Sample command that writes back Hello World! to you\" ; public string Syntax => string . Empty ; public List < string > Aliases => new List < string >(); public List < string > Permissions => new List < string >(); public void Execute ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } } } AllowedCaller: Allow command user (Player, Console or Both) Name: The commands name (e.g. rocket , buy , kick , etc). Help: A short summary of the commands function. Syntax: A syntax string for the command [] = optional and <> = required (e.g. [steamId] ). Aliases: A list of alternative for the name, not required. Permissions: A list of alternative for the permissions, not required. Execute: The method that gets invoked when someone executes your command. IRocketCommand s are automatically registered when your plugin loads.","title":"1. Registering Commands with IRocketCommand"},{"location":"development-guide/getting-started/commands/#2-registering-commands-with-rocketcommand-attribute","text":"The exactly same doing sample command you can also make using RocketCommand attribute like this: [RocketCommand(\"sample\", \"Sample command that writes back Hello World! to you\")] public void SampleCommand ( IRocketPlayer caller , string [] command ) { UnturnedChat . Say ( caller , \"Hello World!\" , UnityEngine . Color . cyan ); } Note If you want to initialize commands using RocketCommand attribute, you must do it in the instance class of a plugin, otherwise commands will not load!","title":"2. Registering Commands with RocketCommand attribute"},{"location":"development-guide/getting-started/making-your-first-plugin/","text":"Making your first plugin \u00b6 In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin. Installing the IDE for coding \u00b6 Visual Studio Code \u00b6 You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects. Visual Studio \u00b6 If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2022 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify. Making a plugin from scratch \u00b6 First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 The next step is to add Unturned and Rocket's binaries to your project. You should make a new directory inside your project folder called Libraries or libs , and copy the following files over from the Unturned\\Unturned_Data\\Managed\\ directory: Assembly-Csharp.dll SDG.NetTransport.dll com.rlabrecque.steamworks.net.dll UnityEngine.dll UnityEngine.CoreModule.dll aswell as the Rocket binaries from Unturned\\Extras\\Rocket.Unturned\\ : Rocket.Core.dll Rocket.API.dll Rocket.Unturned.dll Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $\"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $\"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-your-first-plugin","text":"In this guide we will cover: Setting up development environment. Creating a plugin project. Writing a basic plugin.","title":"Making your first plugin"},{"location":"development-guide/getting-started/making-your-first-plugin/#installing-the-ide-for-coding","text":"","title":"Installing the IDE for coding"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio-code","text":"You can install install Visual Studio Code with the Omnisharp extension for developing plugins. Visual Studio Code is much lightweighter and faster then a full Visual Studio installation. It is optimal for small-mid size projects.","title":"Visual Studio Code"},{"location":"development-guide/getting-started/making-your-first-plugin/#visual-studio","text":"If you want a full IDE experience, download and install Visual Studio Community Edition . When the installer starts, select \"Visual Studio 2022 Community Edition\" (or newer). After that select the .NET Desktop Development option and press install/modify.","title":"Visual Studio"},{"location":"development-guide/getting-started/making-your-first-plugin/#making-a-plugin-from-scratch","text":"First create new \"Class Library (.NET Framework)\" in Visual Studio. Remember to select Framework to .NET Framework 4.6.1 The next step is to add Unturned and Rocket's binaries to your project. You should make a new directory inside your project folder called Libraries or libs , and copy the following files over from the Unturned\\Unturned_Data\\Managed\\ directory: Assembly-Csharp.dll SDG.NetTransport.dll com.rlabrecque.steamworks.net.dll UnityEngine.dll UnityEngine.CoreModule.dll aswell as the Rocket binaries from Unturned\\Extras\\Rocket.Unturned\\ : Rocket.Core.dll Rocket.API.dll Rocket.Unturned.dll Now in Visual Studio's solution explorer right click on References and press Add Reference . Then browse for RocketMod and Unturned libraries that you saved in your projects directory, select and add them. After that rename the pre-existing Class1.cs file to ExamplePlugin.cs from the solution explorer. On the top of the file add using Rocket.Core.Plugins . We're now gonna start by making ExamplePlugin inherit from RocketPlugin , so your ExamplePlugin.cs should look like this now. using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { } } Now for the beginning we're gonna send a basic logger message when the plugin loads and unloads. For that you have to override void Load() and void Unload() methods like below and add your message. Note I've added 2 more usings to the top of ExamplePlugins.cs ( System and Rocket.Core.Logging ) using System ; using Rocket.Core.Logging ; using Rocket.Core.Plugins ; namespace ExamplePlugin { public class ExamplePlugin : RocketPlugin { protected override void Load () { Logger . Log ( $\"{Name} {Assembly.GetName().Version} has been loaded!\" , ConsoleColor . Yellow ); } protected override void Unload () { Logger . Log ( $\"{Name} has been unloaded!\" , ConsoleColor . Yellow ); } } } Note Assembly.GetName().Version returns your Assembly Version. You can change it in AssemblyInfo.cs . You can find under Properties in Visual Studio's solution explorer.","title":"Making a plugin from scratch"},{"location":"user-guide/getting-started/","text":"Installing LDM \u00b6 Assuming you already have a Vanilla Unturned server up and running, the best way to install LDM, is to copy the Rocket.Unturned folder from Unturned/Extras into Unturned/Modules within your server installation directory. Alternatively, you can also download the latest release from GitHub . Once you have downloaded the release, extract the .zip file, and place the Rocket.Unturned folder into Unturned/Modules within your server installation directory. Run your Server \u00b6 After you have copied over the Rocket.Unturned module, start up your server. Once your server has finished starting, check your server's home folder (probably Unturned/Servers/<your server>/ ) for the Rocket directory. This means LDM has successfully been installed! You are now able to start installing plugins.","title":"Getting Started"},{"location":"user-guide/getting-started/#installing-ldm","text":"Assuming you already have a Vanilla Unturned server up and running, the best way to install LDM, is to copy the Rocket.Unturned folder from Unturned/Extras into Unturned/Modules within your server installation directory. Alternatively, you can also download the latest release from GitHub . Once you have downloaded the release, extract the .zip file, and place the Rocket.Unturned folder into Unturned/Modules within your server installation directory.","title":"Installing LDM"},{"location":"user-guide/getting-started/#run-your-server","text":"After you have copied over the Rocket.Unturned module, start up your server. Once your server has finished starting, check your server's home folder (probably Unturned/Servers/<your server>/ ) for the Rocket directory. This means LDM has successfully been installed! You are now able to start installing plugins.","title":"Run your Server"},{"location":"user-guide/installing-plugins/","text":"Plugins \u00b6 Plugins are the core feature of the Rocket/LDM framework. Plugins are pre-compiled binaries that add to the vanilla codebase to give your server extra commands, utilities, and even entirely new features and gamemodes. Sourcing Plugins \u00b6 Plugins can be found in a multitude of places, but we have put together a comprehensive list of plugins from trusted sources in our plugin repository . If our list doesn't have what you are looking for, try some of the sites listed on our trusted plugin sites list . Installing Plugins \u00b6 When you download a plugin, you will most likely recieve a .zip file containing something like the following: ZaupShop-v1-master.zip \u251c\u2500 ZaupShop.dll \u2514\u2500 Libraries/ \u251c\u2500 MySQL.Data.dll \u251c\u2500 I18N.dll \u2514\u2500 I18N.West.dll You may also just recieve the core plugin binary (e.g. ZaupShop.dll ). Note Some paid plugin sites use their own licencing and plugin loading system - although we won't cover any in this guide, if you need assitance with this, or have any questions, feel free to Join our Discord Server ! To install the plugin, while your server is not running, simply copy the plugin .dll file (this will most likely be the file not in a \"lib\" or \"Libraries\" folder if you downloaded a .zip) into the Rocket/Plugins directory on your server. If your plugin came with required Libraries, copy those files into the Rocket/Libraries directory on your server. You are now free to start your server back up again, and enjoy your new plugins!","title":"Installing Plugins"},{"location":"user-guide/installing-plugins/#plugins","text":"Plugins are the core feature of the Rocket/LDM framework. Plugins are pre-compiled binaries that add to the vanilla codebase to give your server extra commands, utilities, and even entirely new features and gamemodes.","title":"Plugins"},{"location":"user-guide/installing-plugins/#sourcing-plugins","text":"Plugins can be found in a multitude of places, but we have put together a comprehensive list of plugins from trusted sources in our plugin repository . If our list doesn't have what you are looking for, try some of the sites listed on our trusted plugin sites list .","title":"Sourcing Plugins"},{"location":"user-guide/installing-plugins/#installing-plugins","text":"When you download a plugin, you will most likely recieve a .zip file containing something like the following: ZaupShop-v1-master.zip \u251c\u2500 ZaupShop.dll \u2514\u2500 Libraries/ \u251c\u2500 MySQL.Data.dll \u251c\u2500 I18N.dll \u2514\u2500 I18N.West.dll You may also just recieve the core plugin binary (e.g. ZaupShop.dll ). Note Some paid plugin sites use their own licencing and plugin loading system - although we won't cover any in this guide, if you need assitance with this, or have any questions, feel free to Join our Discord Server ! To install the plugin, while your server is not running, simply copy the plugin .dll file (this will most likely be the file not in a \"lib\" or \"Libraries\" folder if you downloaded a .zip) into the Rocket/Plugins directory on your server. If your plugin came with required Libraries, copy those files into the Rocket/Libraries directory on your server. You are now free to start your server back up again, and enjoy your new plugins!","title":"Installing Plugins"},{"location":"user-guide/configuration/configurations/","text":"","title":"Configurations"},{"location":"user-guide/configuration/permissions/","text":"","title":"Permissions"},{"location":"user-guide/configuration/plugins/","text":"","title":"Plugins"},{"location":"user-guide/configuration/translations/","text":"","title":"Translations"}]}